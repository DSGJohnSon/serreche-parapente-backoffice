// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  MONITEUR
  CUSTOMER
}

enum StageType {
  INITIATION
  PROGRESSION
  AUTONOMIE
  DOUBLE
}

enum StageBookingType {
  INITIATION
  PROGRESSION
  AUTONOMIE
}

enum BaptemeCategory {
  AVENTURE
  DUREE
  LONGUE_DUREE
  ENFANT
  HIVER
}

// Nouveaux enums pour le système de panier
enum CartItemType {
  STAGE
  BAPTEME
  GIFT_CARD
}

enum OrderStatus {
  PENDING
  PAID
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

//Catégories de baptêmes avec leurs prix fixes
model BaptemeCategoryPrice {
  id       String          @id @default(cuid())
  category BaptemeCategory @unique
  price    Float
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Créneau de stage de parapente (similaire aux baptêmes)
model Stage {
  id         String    @id @default(cuid())
  startDate  DateTime  // Plus de contrainte unique pour permettre plusieurs stages par jour
  duration   Int       @default(7) // Durée en jours
  places     Int       @default(6)
  price      Float     @default(350.0) // Prix en euros
  type       StageType @default(INITIATION)

  // Relation many-to-many avec les moniteurs
  moniteurs  StageMoniteur[]
  bookings   StageBooking[]

  // Nouvelles relations pour le système de panier
  cartItems  CartItem[]
  orderItems OrderItem[]
  temporaryReservations TemporaryReservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Table de liaison pour les moniteurs de stages
model StageMoniteur {
  id         String @id @default(cuid())
  stageId    String
  moniteurId String
  stage      Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  moniteur   User   @relation("StageMoniteurs", fields: [moniteurId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@unique([stageId, moniteurId])
}

//Créneau de bapteme
model Bapteme {
  id         String            @id @default(cuid())
  date       DateTime          @unique
  duration   Int               @default(120) // Durée en minutes
  places     Int               @default(6)
  categories BaptemeCategory[] // Catégories disponibles sur ce créneau
  
  // Relation many-to-many avec les moniteurs
  moniteurs  BaptemeMoniteur[]
  bookings   BaptemeBooking[]
  
  // Nouvelles relations pour le système de panier
  cartItems  CartItem[]
  orderItems OrderItem[]
  temporaryReservations TemporaryReservation[]
  
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

//Table de liaison pour les moniteurs de baptêmes
model BaptemeMoniteur {
  id         String  @id @default(cuid())
  baptemeId  String
  moniteurId String
  bapteme    Bapteme @relation(fields: [baptemeId], references: [id], onDelete: Cascade)
  moniteur   User    @relation("BaptemeMoniteurs", fields: [moniteurId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@unique([baptemeId, moniteurId])
}

//Réservation d'une semaine de stage de parapente (Lien entre Stage et Customer)
model StageBooking {
  id         String    @id @default(cuid())
  type       StageBookingType @default(INITIATION)
  stageId    String
  stage      Stage     @relation(fields: [stageId], references: [id])
  customerId String
  customer   Customer  @relation(fields: [customerId], references: [id])
  
  // Relation avec OrderItem
  orderItem  OrderItem?
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
//Réservation d'un créneau de bapteme (Lien entre Bapteme et Customer)
model BaptemeBooking {
  id         String          @id @default(cuid())
  baptemeId  String
  bapteme    Bapteme         @relation(fields: [baptemeId], references: [id])
  customerId String
  customer   Customer        @relation(fields: [customerId], references: [id])
  category   BaptemeCategory // Catégorie choisie par le client
  hasVideo   Boolean         @default(false) // Option vidéo sélectionnée
  
  // Relation avec OrderItem
  orderItem  OrderItem?
  
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model GiftCard {
  id         String    @id @default(cuid())
  code       String    @unique
  amount     Float     @default(0.0) // Montant en euros
  isUsed     Boolean   @default(false)
  customerId String?
  customer   Customer? @relation(name: "GiftCardBuyer", fields: [customerId], references: [id])

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  usedAt     DateTime?
  usedBy     String?   // ID du client qui a utilisé la carte-cadeau
  usedByCustomer Customer? @relation(name: "GiftCardUser", fields: [usedBy], references: [id])
  
  // Nouvelles relations pour le système de commandes
  appliedToOrders Order[]
  generatedFromOrderItem OrderItem[] @relation("GeneratedGiftCard")
}

//CLient
model Customer {
  id         String         @id @default(cuid())
  firstName  String
  lastName   String
  birthDate  DateTime?
  email      String         @unique
  phone      String
  adress    String
  postalCode String
  city       String
  country    String
  weight     Float
  height     Float
  stages     StageBooking[]
  BaptemeBooking BaptemeBooking[]
  giftCards  GiftCard[]     @relation(name: "GiftCardBuyer")
  giftCardsUsed GiftCard[]  @relation(name: "GiftCardUser")
  
  // Nouvelles relations pour le système de panier
  cartItems CartItem[]
  
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

}

//Admin
model User {
  id        String   @id @unique
  email     String   @unique
  name      String
  avatarUrl String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations many-to-many avec les stages et baptêmes
  stageMoniteurs   StageMoniteur[]   @relation("StageMoniteurs")
  baptemeMoniteurs BaptemeMoniteur[] @relation("BaptemeMoniteurs")
}

// Session temporaire pour les paniers non-authentifiés
model CartSession {
  id        String   @id @default(cuid())
  sessionId String   @unique // UUID généré côté client
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cartItems CartItem[]
  
  @@index([expiresAt])
  @@index([sessionId])
}

// Articles dans le panier
model CartItem {
  id        String       @id @default(cuid())
  type      CartItemType
  quantity  Int          @default(1)
  
  // Références optionnelles selon le type
  stageId   String?
  stage     Stage?       @relation(fields: [stageId], references: [id])
  
  baptemeId String?
  bapteme   Bapteme?     @relation(fields: [baptemeId], references: [id])
  
  // Pour les bons cadeaux
  giftCardAmount Float?
  
  // Informations du participant
  participantData Json // {firstName, lastName, email, phone, weight, height, birthDate?}
  
  // Session ou customer
  cartSessionId String?
  cartSession   CartSession? @relation(fields: [cartSessionId], references: [id], onDelete: Cascade)
  
  customerId    String?
  customer      Customer?    @relation(fields: [customerId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([cartSessionId])
  @@index([customerId])
}

// Réservation temporaire pour gérer les stocks
model TemporaryReservation {
  id        String   @id @default(cuid())
  sessionId String   // Session du panier
  
  // Référence à l'activité
  stageId   String?
  stage     Stage?   @relation(fields: [stageId], references: [id])
  
  baptemeId String?
  bapteme   Bapteme? @relation(fields: [baptemeId], references: [id])
  
  quantity  Int      @default(1)
  expiresAt DateTime // 15 minutes par défaut
  
  createdAt DateTime @default(now())
  
  @@index([expiresAt])
  @@index([sessionId])
}

// Commande principale
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique // Format: ORD-YYYY-XXXXXX
  status        OrderStatus @default(PENDING)
  
  // Montants
  subtotal      Float
  discountAmount Float      @default(0.0)
  totalAmount   Float
  
  // Informations client
  customerEmail String
  customerData  Json       // Sauvegarde des infos client au moment de la commande
  
  // Bon cadeau utilisé
  appliedGiftCardId String?
  appliedGiftCard   GiftCard? @relation(fields: [appliedGiftCardId], references: [id])
  
  // Relations
  orderItems    OrderItem[]
  payments      Payment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([orderNumber])
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
}

// Articles de la commande
model OrderItem {
  id       String       @id @default(cuid())
  orderId  String
  order    Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  type     CartItemType
  quantity Int          @default(1)
  unitPrice Float
  totalPrice Float
  
  // Références selon le type
  stageId   String?
  stage     Stage?   @relation(fields: [stageId], references: [id])
  
  baptemeId String?
  bapteme   Bapteme? @relation(fields: [baptemeId], references: [id])
  
  // Pour les bons cadeaux
  giftCardAmount Float?
  generatedGiftCardId String?
  generatedGiftCard   GiftCard? @relation("GeneratedGiftCard", fields: [generatedGiftCardId], references: [id])
  
  // Données du participant
  participantData Json
  
  // Réservations créées
  stageBookingId   String? @unique
  stageBooking     StageBooking?   @relation(fields: [stageBookingId], references: [id])
  
  baptemeBookingId String? @unique
  baptemeBooking   BaptemeBooking? @relation(fields: [baptemeBookingId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([orderId])
}

// Paiements
model Payment {
  id              String        @id @default(cuid())
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  
  stripePaymentIntentId String  @unique
  status          PaymentStatus @default(PENDING)
  amount          Float
  currency        String        @default("eur")
  
  // Métadonnées Stripe
  stripeMetadata  Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([orderId])
  @@index([stripePaymentIntentId])
}
